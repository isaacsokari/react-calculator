{"version":3,"sources":["App.js","index.js"],"names":["numbers","zero","seven","eight","nine","four","five","six","one","two","three","operators","add","subtract","multiply","divide","endsWithTwoOperators","endsWithOneOperator","Calculator","React","useState","value","setValue","hasJustEvaluated","setHasJustEvaluated","hasEvaluated","setHasEvaluated","fullExpression","setFullExpression","hasDecimalPoint","setHasDecimalPoint","hasUsedOperator","setHasUsedOperator","resetCalculator","clearValue","handleNumber","e","includes","length","target","test","prevValue","setTimeout","handleOperator","slice","handleDecimal","handleEvaluate","expression","eval","className","id","onClick","Object","keys","map","num","operator","Title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90822ecc.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n  const numbers = {\n    zero: 0,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n    four: 4,\n    five: 5,\n    six: 6,\n    one: 1,\n    two: 2,\n    three: 3\n  },\n  operators = { add: \"+\", subtract: \"-\", multiply: \"*\", divide: \"/\" },\n  endsWithTwoOperators = /([*+-/]{2}$)/,\n  endsWithOneOperator = /[/*+-]$/;\n\nconst Calculator = () => {\n  const [value, setValue] = React.useState(\"0\");\n  const [hasJustEvaluated, setHasJustEvaluated] = React.useState(false);\n  const [hasEvaluated, setHasEvaluated] = React.useState(false);\n  const [fullExpression, setFullExpression] = React.useState(\"\");\n  const [hasDecimalPoint, setHasDecimalPoint] = React.useState(false);\n  const [hasUsedOperator, setHasUsedOperator] = React.useState(false);\n\n  // React.useEffect(() => {\n  //   console.log({hasJustEvaluated})\n  // })\n\n  const resetCalculator = () => {\n    clearValue();\n    setFullExpression(\"\");\n    setHasJustEvaluated(false);\n  };\n\n  const clearValue = () => {\n    setValue(\"0\");\n    setHasDecimalPoint(false);\n  };\n\n  const handleNumber = (e) => {\n    if (!value.includes(\"Limit\")) {\n      // set 22 digit input limit\n      if (`${value}`.length <= 21) {\n        // start new expression after evaluation\n        if (hasJustEvaluated || hasUsedOperator) {\n          setValue(e.target.value);\n        } else if (/\\.$/.test(value)) {\n          //\n          setValue(`${value}${e.target.value}`);\n        } else {\n          // ignore multiple 0s at beginning\n          setValue(\n            `${+value || /\\./.test(value) ? value : \"\"}${e.target.value}`\n          );\n        }\n      } else {\n        let prevValue = value;\n\n        setValue(\"Digit Limit Reached\");\n        setTimeout(() => setValue(prevValue), 1000);\n      }\n      setHasUsedOperator(false);\n      setHasJustEvaluated(false);\n    }\n  };\n\n  const handleOperator = (e) => {\n    if (!value.includes(\"Limit\")) {\n      if (hasEvaluated || !fullExpression) {\n        // handle fresh expressions\n        setFullExpression(`${value}${e.target.value}`);\n        setHasEvaluated(false);\n      } else if (endsWithOneOperator.test(fullExpression) && hasUsedOperator) {\n        // handle expressions that are chained\n        if (endsWithTwoOperators.test(fullExpression) && hasUsedOperator) {\n          // handle two signs at the end - replace with new sign\n          if (!/^-$/.test(e.target.value) && hasUsedOperator) {\n            setFullExpression(\n              `${fullExpression.slice(0, -2)}${e.target.value}`\n            );\n          }\n        } else if (/^-$/.test(e.target.value) && hasUsedOperator) {\n          // add a negative sign at the end if there's only one sign\n          if (!endsWithTwoOperators.test(fullExpression)) {\n            setFullExpression(`${fullExpression}${e.target.value}`);\n          }\n        } else {\n          setFullExpression(`${fullExpression.slice(0, -1)}${e.target.value}`);\n        }\n      } else if (fullExpression && !hasUsedOperator) {\n        setFullExpression(`${fullExpression}${value}${e.target.value}`);\n      }\n\n      setHasUsedOperator(true);\n      setHasDecimalPoint(false);\n      setHasJustEvaluated(false);\n    }\n  };\n\n  const handleDecimal = (e) => {\n    if (!value.includes(\"Limit\")) {\n      if (!hasDecimalPoint && !/\\./.test(value)) {\n        setValue(`${value}.`);\n        setHasDecimalPoint(true);\n        setHasJustEvaluated(false);\n      }\n    }\n  };\n\n  const handleEvaluate = (e) => {\n    if (!value.includes(\"Limit\")) {\n      let expression = hasJustEvaluated ? \"\" : fullExpression;\n      // while (endsWithOneOperator.test(expression)) {\n      //   expression = expression.slice(0, -1);\n      // }\n      setFullExpression(expression + value);\n      // eslint-disable-next-line\n      setValue(`${eval(expression + \"\" + value)}`);\n\n      setHasJustEvaluated(true);\n      setHasEvaluated(true);\n      setHasDecimalPoint(false);\n      setHasUsedOperator(false);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"calculator\">\n        <div className=\"display\">\n          <div className=\"full-expression\">{fullExpression}</div>\n          <div id=\"display\">{value}</div>\n        </div>\n        <button id=\"clear\" onClick={resetCalculator}>\n          AC\n        </button>\n        {Object.keys(numbers).map((num) => (\n          <button id={num} value={numbers[num]} onClick={handleNumber}>\n            {numbers[num]}\n          </button>\n        ))}\n        {Object.keys(operators).map((operator) => (\n          <button\n            id={operator}\n            value={operators[operator]}\n            onClick={handleOperator}\n          >\n            {operators[operator]}\n          </button>\n        ))}\n        <button id=\"equals\" value=\"=\" onClick={handleEvaluate}>\n          =\n        </button>\n        <button id=\"decimal\" value=\".\" onClick={handleDecimal}>\n          .\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Calculator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './App';\n// import reportWebVitals from './reportWebVitals';\n\nconst Title = () => {\n  return (\n      <h1>Simple React Calculator</h1>\n  )\n}\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Title />\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}